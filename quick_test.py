#!/usr/bin/env python3
"""
Quick test script to verify basic functionality
"""

def test_basic_imports():
    """Test basic package imports"""
    print("üß™ TESTING BASIC IMPORTS")
    print("=" * 40)
    
    try:
        import pandas as pd
        print("‚úÖ pandas")
    except ImportError as e:
        print(f"‚ùå pandas: {e}")
        return False
    
    try:
        import numpy as np
        print("‚úÖ numpy")
    except ImportError as e:
        print(f"‚ùå numpy: {e}")
        return False
    
    try:
        import requests
        print("‚úÖ requests")
    except ImportError as e:
        print(f"‚ùå requests: {e}")
        return False
    
    try:
        import yfinance as yf
        print("‚úÖ yfinance")
    except ImportError as e:
        print(f"‚ùå yfinance: {e}")
        return False
    
    try:
        import flask
        print("‚úÖ flask")
    except ImportError as e:
        print(f"‚ùå flask: {e}")
        return False
    
    try:
        import flask_socketio
        print("‚úÖ flask_socketio")
    except ImportError as e:
        print(f"‚ùå flask_socketio: {e}")
        return False
    
    # Optional imports
    try:
        import talib
        print("‚úÖ talib (optional)")
    except ImportError:
        print("‚ö†Ô∏è  talib not available (optional)")
    
    try:
        import ta
        print("‚úÖ ta")
    except ImportError:
        print("‚ö†Ô∏è  ta not available")
    
    try:
        import schedule
        print("‚úÖ schedule")
    except ImportError:
        print("‚ö†Ô∏è  schedule not available")
    
    print("=" * 40)
    print("‚úÖ Basic imports test completed!")
    return True

def test_yfinance():
    """Test yfinance functionality"""
    print("\nüìä TESTING YFINANCE")
    print("=" * 40)
    
    try:
        import yfinance as yf
        
        # Test getting data for RELIANCE
        print("Testing RELIANCE.NS data...")
        ticker = yf.Ticker("RELIANCE.NS")
        data = ticker.history(period="1d")
        
        if not data.empty:
            latest_price = data['Close'].iloc[-1]
            print(f"‚úÖ RELIANCE.NS: ‚Çπ{latest_price:.2f}")
        else:
            print("‚ö†Ô∏è  No data received for RELIANCE.NS")
        
        print("=" * 40)
        print("‚úÖ yfinance test completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå yfinance test failed: {e}")
        return False

def test_flask():
    """Test Flask functionality"""
    print("\nüåê TESTING FLASK")
    print("=" * 40)
    
    try:
        from flask import Flask
        from flask_socketio import SocketIO
        
        app = Flask(__name__)
        socketio = SocketIO(app)
        
        @app.route('/')
        def home():
            return "Hello from Flask!"
        
        print("‚úÖ Flask app created successfully")
        print("‚úÖ SocketIO initialized")
        print("=" * 40)
        print("‚úÖ Flask test completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Flask test failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ UNIFIED AI TRADING PLATFORM - QUICK TEST")
    print("=" * 50)
    
    success = True
    
    if not test_basic_imports():
        success = False
    
    if success:
        test_yfinance()
    
    if success:
        test_flask()
    
    if success:
        print("\nüéâ ALL TESTS PASSED!")
        print("‚úÖ Your system is ready for the AI Trading Platform")
        print("\nNext steps:")
        print("1. Run: python unified_ai_trading_platform.py --test-mode")
        print("2. If successful, run: python unified_ai_trading_platform.py")
        print("3. Open http://localhost:5000 in your browser")
    else:
        print("\n‚ùå SOME TESTS FAILED!")
        print("Please install missing packages:")
        print("pip install -r requirements.txt")
    
    print("=" * 50)
